// Generated by CoffeeScript 2.4.1
(function() {
  var boundMethodCheck = function(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new Error('Bound instance method accessed before binding'); } };

  jQuery(function() {
    var Item, ItemView, List, ListView, list_view;
    Item = (function() {
      class Item extends Backbone.Model {};

      Item.prototype.defaults = {
        part1: 'Hello',
        part2: 'Backbone'
      };

      return Item;

    }).call(this);
    List = (function() {
      class List extends Backbone.Collection {};

      List.prototype.model = Item;

      return List;

    }).call(this);
    ItemView = (function() {
      class ItemView extends Backbone.View {
        constructor() {
          super(...arguments);
          this.render = this.render.bind(this);
          this.unrender = this.unrender.bind(this);
        }

        initialize() {
          _.bindAll(this);
          this.model.bind('change', this.render);
          return this.model.bind('remove', this.unrender);
        }

        render() {
          boundMethodCheck(this, ItemView);
          $(this.el).html(`"\n<span>${model.get('part1')} ${model.get('part2')}</span>\n<span class="swap">swap</span>\n<span class="delete">delete</span>`);
          return this;
        }

        unrender() {
          boundMethodCheck(this, ItemView);
          return $(this.el).remove();
        }

        swap() {
          return this.model.set({
            part1: this.model.get('part2'),
            part2: this.model.get('part1')
          });
        }

        remove() {
          return this.model.destroy();
        }

      };

      ItemView.prototype.tagName = 'li';

      ItemView.prototype.events = {
        'click .swap': 'swap',
        'click .delete': 'remove'
      };

      return ItemView;

    }).call(this);
    ListView = class ListView extends Backbone.View {};
    ({
      el: 'body',
      initialize: function() {
        _.bindAll(this);
        this.collection = new List;
        this.collection.bind('add', this.appendItem);
        this.counter = 0;
        return this.render();
      },
      render: function() {
        $(this.el).append('<button>Add List Item</button>');
        return $(this.el).append('<ul></ul>');
      },
      addItem: function() {
        var item;
        this.counter++;
        item = new Item;
        item.set({
          part2: `${item.get('part2')} ${this.counter}`
        });
        return this.collection.add(item);
      },
      appendItem: function(item) {
        var item_view;
        item_view = new ItemView({
          model: item
        });
        return $('ul').append(item_view.render().el);
      },
      events: {
        'click button': 'addItem'
      }
    });
    return list_view = new ListView;
  });

}).call(this);
