{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/pedroaquino/Desktop/ios-calculator/ios-calculator/src/components/Calculator.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport CalcDisplay from './CalcDisplay';\nimport CalcButtonLine from './CalcButtonLine';\nimport CalcButton from './CalcButton';\nimport pipe from 'ramda/src/pipe';\n\nconst Calculator = ({\n  expression,\n  onClickCalcButton\n}) => /*#__PURE__*/_jsxDEV(\"div\", {\n  className: \"calc\",\n  children: [/*#__PURE__*/_jsxDEV(CalcDisplay, {\n    text: expression\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"calc__buttons\",\n    children: [/*#__PURE__*/_jsxDEV(CalcButtonLine, {\n      children: [/*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \"C\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \"AC\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \"%\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \"\\xF7\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalcButtonLine, {\n      children: [/*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \"7\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \"8\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \"9\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 20,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \"X\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalcButtonLine, {\n      children: [/*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \"4\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \"5\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \"6\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \"-\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalcButtonLine, {\n      children: [/*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \"1\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \"2\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \"3\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \"+\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(CalcButtonLine, {\n      children: [/*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \"0\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \",\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(CalcButton, {\n        text: \"=\",\n        onClick: onClickCalcButton\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 10,\n    columnNumber: 5\n  }, this)]\n}, void 0, true, {\n  fileName: _jsxFileName,\n  lineNumber: 8,\n  columnNumber: 3\n}, this); // constants\n\n\n_c = Calculator;\nconst OPERATIONS = {\n  '+': () => null,\n  'X': () => null,\n  '-': () => null,\n  '%': () => null,\n  'รท': () => null\n};\nconst ACTIONS = {\n  '=': () => console.error('the button \"=\" is not yet implemented'),\n  'C': () => console.error('the button \"C\" is not yet implemented'),\n  'AC': () => console.error('the button \"AC\" is not yet implemented')\n}; // helpers\n\nconst isNumber = number => !isNaN(number);\n\nconst isOperation = button => !!OPERATIONS[button];\n\nconst sanitizeExpression = expression => button => expression === '0' ? button : expression + button;\n\nconst parseExpression = expression => expression.split('').map(item => isNumber(item) ? item : isOperation(item) ? OPERATIONS[item] : '');\n\nconst reduceExpression = parsed => {\n  let result = [];\n  let numbers = [];\n  let counter = 0;\n\n  while (counter < parsed.length) {\n    const item = parsed[counter];\n\n    if (isNumber(item)) {\n      numbers.push(item);\n    } else {\n      result.push(numbers);\n      result.push(item);\n      numbers = [];\n    }\n\n    counter++;\n  }\n\n  if (numbers.length) {\n    result.push(numbers);\n  }\n\n  return result;\n};\n\nconst CalculatorContainer = () => {\n  _s();\n\n  const [expression, setExpression] = useState('0');\n  const [parsedExpression, setParsed] = useState([]);\n  console.log(parsedExpression);\n\n  const onClickCalcButton = button => {\n    const action = ACTIONS[button];\n\n    if (action) {\n      action();\n      return;\n    } // const newExpression = sanitizeExpression(expression, button);\n    // setExpression(newExpression);\n\n\n    pipe(sanitizeExpression(button), setExpression, parseExpression, reduceExpression, setParsed)(newExpression);\n  };\n\n  return /*#__PURE__*/_jsxDEV(Calculator, {\n    expression: expression,\n    onClickCalcButton: onClickCalcButton\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 10\n  }, this);\n};\n\n_s(CalculatorContainer, \"hGi/XBjN7Vc91xOFRs1qlE/GryY=\");\n\n_c2 = CalculatorContainer;\nexport default CalculatorContainer;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Calculator\");\n$RefreshReg$(_c2, \"CalculatorContainer\");","map":{"version":3,"sources":["/Users/pedroaquino/Desktop/ios-calculator/ios-calculator/src/components/Calculator.js"],"names":["React","useState","CalcDisplay","CalcButtonLine","CalcButton","pipe","Calculator","expression","onClickCalcButton","OPERATIONS","ACTIONS","console","error","isNumber","number","isNaN","isOperation","button","sanitizeExpression","parseExpression","split","map","item","reduceExpression","parsed","result","numbers","counter","length","push","CalculatorContainer","setExpression","parsedExpression","setParsed","log","action","newExpression"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport CalcDisplay from './CalcDisplay';\nimport CalcButtonLine from './CalcButtonLine';\nimport CalcButton from './CalcButton';\nimport pipe from 'ramda/src/pipe';\n\nconst Calculator = ({ expression, onClickCalcButton }) => (\n  <div className=\"calc\">\n    <CalcDisplay text={expression} />\n    <div className=\"calc__buttons\">\n      <CalcButtonLine>\n        <CalcButton text=\"C\" onClick={onClickCalcButton} />\n        <CalcButton text=\"AC\" onClick={onClickCalcButton} />\n        <CalcButton text=\"%\"  onClick={onClickCalcButton} />\n        <CalcButton text=\"รท\"  onClick={onClickCalcButton} />\n      </CalcButtonLine>\n      <CalcButtonLine>\n        <CalcButton text=\"7\" onClick={onClickCalcButton} />\n        <CalcButton text=\"8\" onClick={onClickCalcButton} />\n        <CalcButton text=\"9\" onClick={onClickCalcButton} />\n        <CalcButton text=\"X\" onClick={onClickCalcButton} />\n      </CalcButtonLine>\n      <CalcButtonLine>\n        <CalcButton text=\"4\" onClick={onClickCalcButton} />\n        <CalcButton text=\"5\" onClick={onClickCalcButton} />\n        <CalcButton text=\"6\" onClick={onClickCalcButton} />\n        <CalcButton text=\"-\" onClick={onClickCalcButton} />\n      </CalcButtonLine>\n      <CalcButtonLine>\n        <CalcButton text=\"1\" onClick={onClickCalcButton} />\n        <CalcButton text=\"2\" onClick={onClickCalcButton} />\n        <CalcButton text=\"3\" onClick={onClickCalcButton} />\n        <CalcButton text=\"+\" onClick={onClickCalcButton} />\n      </CalcButtonLine>\n      <CalcButtonLine>\n        <CalcButton text=\"0\" onClick={onClickCalcButton} />\n        <CalcButton text=\",\" onClick={onClickCalcButton} />\n        <CalcButton text=\"=\" onClick={onClickCalcButton} />\n      </CalcButtonLine>\n    </div>\n  </div>\n);\n\n// constants\nconst OPERATIONS = {\n  '+': () => null,\n  'X': () => null,\n  '-': () => null,\n  '%': () => null,\n  'รท': () => null\n};\n\nconst ACTIONS = {\n  '=':  () => console.error('the button \"=\" is not yet implemented'),\n  'C':  () => console.error('the button \"C\" is not yet implemented'),\n  'AC': () => console.error('the button \"AC\" is not yet implemented')\n};\n\n// helpers\nconst isNumber = number => !isNaN(number);\n\nconst isOperation = button => !!OPERATIONS[button];\n\nconst sanitizeExpression = expression => button => expression === '0' ? \nbutton : expression + button;\n\nconst parseExpression = expression => expression.split('').map(\n  item => isNumber(item) ? item : isOperation(item) ? OPERATIONS[item] : ''\n);\n\nconst reduceExpression = parsed => {\n  let result = [];\n  let numbers = [];\n  let counter = 0;\n  while (counter < parsed.length) {\n    const item = parsed[counter];\n    \n    if(isNumber(item)) {\n      numbers.push(item)\n    } else {\n      result.push(numbers);\n      result.push(item)\n      numbers = [];\n    }\n    counter++;\n  }\n\n  if (numbers.length) {\n    result.push(numbers);\n  }\n\n  return result;\n};\n\nconst CalculatorContainer = () => {\n\n  const [expression, setExpression] = useState('0');\n  const [parsedExpression, setParsed] = useState([]);\n\n  console.log(parsedExpression);\n\n  const onClickCalcButton = button => {\n    const action = ACTIONS[button];\n\n    if (action) {\n      action();\n      return\n    }\n    \n    // const newExpression = sanitizeExpression(expression, button);\n    // setExpression(newExpression);\n\n\n    pipe(\n      sanitizeExpression(button),\n      setExpression,\n      parseExpression,\n      reduceExpression,\n      setParsed\n    )(newExpression);\n  };\n\n  return <Calculator \n    expression={expression}\n    onClickCalcButton={onClickCalcButton}\n  />\n}\n\nexport default CalculatorContainer;"]},"metadata":{},"sourceType":"module"}